Para instalar o Docker Engine diretamente no Ubuntu dentro do WSL2, 
você pode seguir estes passos:

1) Abra o terminal do Ubuntu e execute o seguinte comando para atualizar 
a lista de pacotes disponíveis:

sudo apt update


2. Instale os pacotes necessários:

sudo apt install apt-transport-https ca-certificates curl gnupg lsb-release



3. Adicione a chave GPG do Docker:

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg



4. Adicione o repositório do Docker:

Execute o seguinte comando para adicionar o repositório 
oficial do Docker ao seu sistema:

echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null



5. Atualize a lista de pacotes novamente:

sudo apt update



6. Instale o Docker Engine e o containerd:

sudo apt install docker-ce docker-ce-cli containerd.io



7. Verifique a instalação:

sudo docker run hello-world



8. Adicione seu usuário ao grupo Docker (opcional):

sudo usermod -aG docker $USER


Você precisará sair e entrar novamente ou executar 'newgrp docker' 
para que as alterações entrem em vigor.


Inicie o daemon Docker executando o seguinte comando no terminal do Ubuntu:

sudo service docker start


Execute o seguinte comando para confirmar que o serviço Docker está em execução:

sudo service docker status


Listar imagens: Execute docker images para listar as imagens Docker baixadas.


Listar contêineres: Execute docker ps -a para listar todos os contêineres (em execução e parados).


Executar um contêiner Ubuntu: Experimente executar um contêiner Ubuntu interativo: 
docker run -it ubuntu bash.


wsl ~ -d Ubuntu

cd /mnt/c/Users/Handy\ Claude/Desktop/nlw-react-2025/nlw-connect-node


Verificar o arquivo /etc/resolv.conf no WSL:

A saída do cat /etc/resolv.conf confirma que o arquivo está sendo gerado 
automaticamente pelo WSL e que o servidor DNS configurado é 172.21.64.1. 
Como mencionei anteriormente, esse servidor DNS pode não estar resolvendo 
o nome connect-pg corretamente.


Adicionar servidores DNS públicos:

sudo bash -c 'echo "nameserver 8.8.8.8" > /etc/resolv.conf'

sudo bash -c 'echo "nameserver 8.8.4.4" >> /etc/resolv.conf'

Desativar a geração automática do /etc/resolv.conf (opcional, mas recomendado):

Edite o arquivo /etc/wsl.conf:

sudo nano /etc/wsl.conf


Adicione a seguinte configuração:

[network]
generateResolvConf = false


wsl --shutdown
wsl

-------------------------- Comandos Docker ---------------------------------------------------


docker-compose build --no-cache connect-node


docker exec -it nlw-connect-node-connect-pg-1 psql -U docker -d postgres

docker compose exec connect-node bash

docker-compose exec connect-node bash -c "npm install && npm run db:migrate"

## executar o ngrok no terminal do back-end

ngrok http http://localhost:3333

## O comando docker-compose up -d é usado para iniciar e executar aplicações de múltiplos contêineres definidas em um arquivo docker-compose.yml. Vamos detalhar cada parte do comando

## acompanhar os logs do frontend em tempo real.

docker-compose logs -f connect-frontend


## acompanhar os logs do back-end em tempo real.

docker-compose logs -f connect-backend


## verificar os logs dos serviços de banco de dados e cache

docker-compose logs -f connect-pg

docker-compose logs -f connect-redis


## reconstruir e iniciar os contêineres com as novas configurações.

docker-compose up -d --build


## Verificar a Rede Docker:

docker network inspect <nome_da_rede>


## rede Docker que os contêineres estão usando

docker network inspect nlw_25_back_end_default